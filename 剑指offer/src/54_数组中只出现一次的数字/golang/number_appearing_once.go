package golang

// 一个整型数组里除了两个数字之外，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字。

// 题解： 我么知道，两个数字异或，不同为1，相同为0. 假设一串数字中只有一个数字是唯一的，其他都是成对出现，那么我们只需要简单的做异或就能够得到
//这个数字。但是这个题不好办的地方在于，这里有两个不同的数字，那么我们思考，是否能够将这个数组分为两个数组呢？每个数组中都包含其中的一个数字，剩余
//的数字都是成对出现的。

//那么如何做到呢？我们知道，因为至少有两个不同的数字，那么我们只需要将整个数组都进行一个异或，那么就能够得到两个不同数字异或的结果。由于这两个数字不同，
//所以我们一定可以得到一个非零的数字。而二进制表示上，这个非零的数字一定会有一位是1，那么我么就根据这一位是否是1作为判断标准，将原数组分为两个子数组。
//这样子，相同的数字的同一位肯定是相同的，那么相同的数字肯定会被分到同一组去。因为这两个出现一次的数字是不相同的，那么这两个数字的这一位肯定也是不相同的，
//那么这两个数字肯定也会被分到不同的数组里面去。接下来只需要分别对这两个数组进行异或就能够得到这两个数字。
func FindNumsAppearOnce( array []int ) []int {
	// write code here
	var res int
	n := len(array)
	for i := 0; i < n; i++ {
		res ^= array[i]
	}


	//var index int
	//for i := 0; i < 32;i++ {
	//	if res & 1 == 1 {
	//		index = i
	//		break
	//	}
	//
	//	res >>= 1
	//}

	res &= -res

	var r1,r2 int
	for i := 0; i < n; i++{
		if array[i] & res == 1 {
			r1 ^= array[i]
		} else {
			r2 ^= array[i]
		}
	}


	return []int{r1,r2}
}
