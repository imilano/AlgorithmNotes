// 题目描述
// 写一个函数，求两个整数之和，要求在函数体内不得使用+、-、*、/四则运算符号。

// 题解：使用二进制的位运算。将两个数相加的过程分为三步，一是做简单加法，二是做进位，三是将进位和加法的结果再次相加。
// 第一步中，a+b如果暂时不考虑进位的话，1+1=0,1+0=0+1=1,0+0=0，可以看到结果其实是两个数进行异或。第二步中，前面的四种情况中，只有在1+1的情况下才会产生进位，
// 其他情况下都不会产生进位，那么使用（a&b）<< 1即为进位的值。
// 第三步，现在只需要将上述两步得到的简单和与进位相加即可，相加的过程与上述相似，故可用一个循环实现。



class Solution {
public:
    int Add(int num1, int num2)
    {
        int sum,carry;

        do {
          sum = num1 ^ num2;  // 第一步，先将两个数进行异或，这样就得到每一个位的实际二进制值
          carry = (num1 & num2) << 1;  // 第二步，只有在两个1相加的时候才会进位。进位之后，本位是0,前一位（进位位）是1.我们使用两个数想与，然后左移一位来表示两个数相加产生的进位。

        // 第三步，将进位位与本位相加，得到本次相加的结果；这样一个相加的过程仍然可以通过前面的过程来继续执行；
          num1 = sum;
          num2 = carry;
        } while (num2 != 0);  // 循环终止条件就是，不再产生进位，也就是进位的结果是0.
        return num1;
    }
};